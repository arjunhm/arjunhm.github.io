{"componentChunkName":"component---src-templates-post-js","path":"/2024-06-20-c-stuff/","result":{"data":{"markdownRemark":{"html":"<h2>Overview</h2>\n<p>I'll try to write anything I find regarding pointers. Or C in general.\nIts a WIP and its for my reference. so things may not be clear.</p>\n<h3>Using a pointer inside a function</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// integer pointer by p is incremented</span>\n\n        <span class=\"token comment\">// create ptr to another int</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>xp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\n        p <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this does not work.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>C passes arguments by value. Essentially it makes a copy of <code class=\"language-text\">*p</code>, and any modifications to <code class=\"language-text\">*p</code> inside the function only affects the pointer inside the function.</p>\n<p>To modify a pointer, pass a pointer to a pointer.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\nStruct Node\n        - int data\n        - left *Node\n        - right *Node\n*/</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>Node <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>root<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Node <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                n<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Random Generator</h3>\n<p>If I have a function that generates random value in a separate file, I have to call <code class=\"language-text\">srand(time(NULL));</code> in the main file once.</p>\n<h3>initializing variables</h3>\n<p>this went unnoticed and messed up my code</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// only initializes c. a and b are random values</span>\n<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// initializes both a and b</span></code></pre></div>\n<h3>malloc</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">Item<span class=\"token operator\">*</span> <span class=\"token function\">alloc_item</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Item <span class=\"token operator\">*</span>i <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// always malloc. safest.</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If original <code class=\"language-text\">key</code> is freed, item still has access to <code class=\"language-text\">key</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">Node<span class=\"token operator\">*</span> <span class=\"token function\">alloc_node</span><span class=\"token punctuation\">(</span>Item <span class=\"token operator\">*</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">-></span>item <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span> <span class=\"token comment\">// no need to malloc</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If original <code class=\"language-text\">item</code> is freed, <code class=\"language-text\">Node</code> has a dangling pointer</p>\n<h3>Stack vs heap allocated</h3>\n<p>cannot return stack allocated variables.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// stack</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// heap (technically static storage)</span>\n\tNode <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// stack</span>\n\tNode <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span> <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// heap. ptr on stack. node on heap</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>structs</h3>\n<p><code class=\"language-text\">-></code> dereferences struct_obj and accesses member directly. It doesn't return a pointer to member unless member itself is a pointer.</p>","frontmatter":{"title":"Random C stuff","date":"2024-06-20T00:00:00.000Z"}}},"pageContext":{"slug":"/2024-06-20-c-stuff/"}},"staticQueryHashes":[],"slicesMap":{}}