{"componentChunkName":"component---src-templates-post-js","path":"/2024-08-08-cache-simulator/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://github.com/arjunhm/cache-simulator\">link</a></p>\n<h2>Description</h2>\n<p>Configurable cache simulator that employs LRU eviction policy to output the number of hits, misses, and evictions.</p>\n<h3>Files</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">csim.c       Your cache simulator  \r\nMakefile     Builds the simulator and tools  \r\nREADME       This file  \r\ncachelab.c   Required helper functions  \r\ncachelab.h   Required header file  \r\ncsim-ref*    The executable reference cache simulator  \r\ntest-csim*   Tests your cache simulator  \r\ntraces/      Trace files used by test-csim.c  </code></pre></div>\n<h3>Usage</h3>\n<p>Compile your code:<br>\n<code class=\"language-text\">make csim</code></p>\n<p>Check the correctness of your simulator:<br>\n<code class=\"language-text\">./test-csim</code></p>\n<p>Usage:\r\n<code class=\"language-text\">./csim [-hv] -s &lt;num> -E &lt;num> -b &lt;num> -t &lt;file></code></p>\n<p>Options:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  -h         Print this help message.\r\n  -v         Optional verbose flag.\r\n  -s &lt;num>   Number of set index bits.\r\n  -E &lt;num>   Number of lines per set.\r\n  -b &lt;num>   Number of block offset bits.\r\n  -t &lt;file>  Trace file.</code></pre></div>\n<p>Examples:<br>\n<code class=\"language-text\">./csim -s 4 -E 1 -b 4 -t traces/yi.trace</code><br>\n<code class=\"language-text\">./csim -v -s 8 -E 2 -b 4 -t traces/yi.trace</code></p>\n<h3>Tracefiles</h3>\n<p>Valgrind memory traces have the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">I 0400d7d4,8\r\n M 0421c7f0,4\r\n L 04f6b868,8\r\n S 7ff0005c8,8</code></pre></div>\n<p>Each line denotes one or two memory accesses. The format of each line is<br>\n<code class=\"language-text\">[space]operation address,size</code></p>\n<p><strong>Operations</strong><br>\n<code class=\"language-text\">L</code> a data load<br>\n<code class=\"language-text\">S</code> a data store<br>\n<code class=\"language-text\">M</code> a data modify (data load + data store)</p>\n<p><strong>address</strong> specifies a 64-bit hexadecimal memory address.<br>\n<strong>size</strong> specifies the number of bytes accessed by the operation</p>","frontmatter":{"title":"Cache Simulator","date":"2024-08-08T00:00:00.000Z"}}},"pageContext":{"slug":"/2024-08-08-cache-simulator/"}},"staticQueryHashes":[],"slicesMap":{}}